{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\nmotor LeftDriveSmart = motor(PORT1, 3, false);\nmotor RightDriveSmart = motor(PORT7, 3, true);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 200, 26, 13, mm, 1);\nmotor Chuchu = motor(PORT5, false);\nmotor FlyingHweelMotorA = motor(PORT2, false);\nmotor FlyingHweelMotorB = motor(PORT8, true);\nmotor_group FlyingHweel = motor_group(FlyingHweelMotorA, FlyingHweelMotorB);\n\nmotor Rollert = motor(PORT3, true);\ntouchled ScoreBottom = touchled(PORT4);\ndistance Far = distance(PORT10);\ndistance GoalDistance = distance(PORT9);\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  wait(100,msec);\n  double xAxis = BrainInertial.acceleration(xaxis) * 1000;\n  double yAxis = BrainInertial.acceleration(yaxis) * 1000;\n  double zAxis = BrainInertial.acceleration(zaxis) * 1000;\n  // Combine these values into a single integer\n  int seed = int(\n    xAxis + yAxis + zAxis\n  );\n  // Set the seed\n  srand(seed); \n}\n\n\n\nvoid vexcodeInit() {\n\n  // Initializing random seed.\n  initializeRandomSeed(); \n}\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n//----------------------------------------------------------------------------\n//                                                                            \n//    Module:       autonomous.cpp                                                  \n//    Author:       Adrian Keller / Daniel Pereda-Tineo                                                 \n//    Created:      1/28/2025                                                    \n//    Description:  Team 11393C's \"Trilobite\" Autonomous program                                                \n//                                                                            \n//----------------------------------------------------------------------------\n// DRIVETRAIN FORWARD IS FLYWHEEL SIDE, REVERSE IS CATAPULT SIDE\n// Include the IQ Library\n#include \"iq_cpp.h\"\n\n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n// These variables can be adjusted for granular control over robot distance\ndouble ToFirstBall = 800.0;\ndouble ToGoal = 1195.0; // 1200.0 originally\ndouble BackUp = 200.0;\ndouble Spin = 1900.0;\n\n// Function that fires when the robot goes all the way to the goal\nvoid GoalReached () {\n  wait (2, seconds);\n  Rollert.spin(forward);\n  wait(3, seconds);\n  Rollert.stop();\n}\n\nvoid BottomScoringAutonomous () {\n  // Backs the robot up so a human loader can place a ball in front of it\n  Drivetrain.driveFor(reverse,BackUp,mm);\n  FlyingHweel.spin(forward);\n  wait(50,msec);\n\n  // Intakes the ball\n  Drivetrain.driveFor(forward, ToFirstBall, mm);\n  wait(175, msec);\n\n  // Spins around the robot, because the catapult is located on the opposite side of the robot\n  Drivetrain.turnFor(left, Spin, degrees);\n\n  /* If the broadcast function was called AFTER the driveFor call, it\n     would never trigger if the ToGoal variable overshot because\n     of how motor commands work.\n  */\n  event GoalEvent = event(GoalReached);\n  // Spins up the seperate thread for the roller to start spinning.\n  GoalEvent.broadcast();\n  Drivetrain.driveFor(reverse, ToGoal, mm);\n}\n\nvoid AdvancedAutonomous() {\n  Drivetrain.driveFor(forward, ToFirstBall, mm);\n  FlyingHweel.spin(forward);\n  while (!(Far.objectDistance(mm) < 10)) {} // Empty while NOT statements are just \"wait until\"\n  FlyingHweel.stop();\n  Drivetrain.turnFor(left, Spin, degrees);\n\n  Drivetrain.drive(reverse);\n  while (!(GoalDistance.objectDistance(mm) < 20)) {}\n  Drivetrain.stop();\n  Chuchu.spinFor(forward, 1200, degrees);\n  FlyingHweel.spin(forward);\n  Chuchu.spinFor(reverse, 600, degrees);\n  wait(2, seconds);\n  Rollert.spin(forward);\n  FlyingHweel.stop();\n}\n\nint main() {\n  vexcodeInit();\n\n  // Sets up initial values for the robot to have maximum performance\n  Drivetrain.setDriveVelocity(750, percent);\n  FlyingHweel.setVelocity(1000, percent);\n  Rollert.setVelocity(1000,percent);\n  Chuchu.setVelocity(100,percent);\n\n  Rollert.setMaxTorque(1000,percent);\n  Chuchu.setMaxTorque(100,percent);\n\n  Chuchu.setStopping(hold);\n\n  // We consolidate most of the program into a function, to test new strategies without breaking old ones.\n  // BottomScoringAutonomous();\n  AdvancedAutonomous();\n}\n","textLanguage":"cpp","robotConfig":[{"port":[1,7,null],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"3:1","direction":"fwd","gyroType":"none","width":"26","unit":"mm","wheelbase":"13","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[5],"name":"Chuchu","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[2,8],"name":"FlyingHweel","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[3],"name":"Rollert","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[4],"name":"ScoreBottom","customName":true,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22},{"port":[10],"name":"Far","customName":true,"deviceType":"Distance","deviceClass":"distance","setting":{}},{"port":[9],"name":"GoalDistance","customName":true,"deviceType":"Distance","deviceClass":"distance","setting":{}}],"slot":7,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"4.0.8","fileFormat":"2.0.0","targetBrainGen":"Second","v5SoundsEnabled":false}