{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\ncontroller Controller = controller();\nmotor LeftDriveSmart = motor(PORT1, 3, false);\nmotor RightDriveSmart = motor(PORT7, 3, true);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 200, 26, 13, mm, 1);\nmotor Chuchu = motor(PORT5, false);\nmotor FlyingHweelMotorA = motor(PORT2, false);\nmotor FlyingHweelMotorB = motor(PORT8, true);\nmotor_group FlyingHweel = motor_group(FlyingHweelMotorA, FlyingHweelMotorB);\n\nmotor Rollert = motor(PORT3, true);\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  wait(100,msec);\n  double xAxis = BrainInertial.acceleration(xaxis) * 1000;\n  double yAxis = BrainInertial.acceleration(yaxis) * 1000;\n  double zAxis = BrainInertial.acceleration(zaxis) * 1000;\n  // Combine these values into a single integer\n  int seed = int(\n    xAxis + yAxis + zAxis\n  );\n  // Set the seed\n  srand(seed); \n}\n\n\n\nvoid vexcodeInit() {\n\n  // Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool DrivetrainLNeedsToBeStopped_Controller = true;\nbool DrivetrainRNeedsToBeStopped_Controller = true;\n\n// define a task that will handle monitoring inputs from Controller\nint rc_auto_loop_function_Controller() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      \n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = AxisA\n      // right = AxisD\n      int drivetrainLeftSideSpeed = Controller.AxisA.position();\n      int drivetrainRightSideSpeed = Controller.AxisD.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller(rc_auto_loop_function_Controller);\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n//----------------------------------------------------------------------------\n//                                                                            \n//    Module:       main.cpp                                                  \n//    Author:       Adrian Keller                                                  \n//    Created:      1/28/2025                                                    \n//    Description:  IQ project                                                \n//                                                                            \n//----------------------------------------------------------------------------\n\n// Include the IQ Library\n#include \"iq_cpp.h\"\n\n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nvoid SetChuchu() {\n  Chuchu.spinFor(forward, 600, degrees);\n}\nvoid ResetChuchu() {\n  Chuchu.spinFor(reverse, 600, degrees);\n}\nvoid ChuchuForward () {\n  Chuchu.spin(forward);\n}\nvoid ChuchuReverse () {\n  Chuchu.spin(reverse);\n}\nvoid ChuchuStop () {\n  Chuchu.stop();\n}\nvoid FlyIn () {\n  FlyingHweel.spin(forward);\n}\nvoid FlyOut () {\n  FlyingHweel.spin(reverse);\n}\nvoid FlyStop () {\n  FlyingHweel.stop();\n}\nvoid RollertOut () {\n  Rollert.spin(forward);\n}\nvoid RollertIn () {\n  Rollert.spin(reverse);\n}\nvoid RollertStop () {\n  Rollert.stop();\n}\n\nint main() {\n  vexcodeInit();\n  Drivetrain.setDriveVelocity(500, percent);\n  FlyingHweel.setVelocity(1000, percent);\n  Rollert.setVelocity(1000,percent);\n  Rollert.setMaxTorque(1000,percent);\n  Chuchu.setVelocity(100,percent);\n  Chuchu.setMaxTorque(100,percent);\n  Chuchu.setStopping(hold);\n\n  \n\n  Controller.ButtonRUp.pressed(RollertOut);\n  Controller.ButtonRDown.pressed(RollertIn);\n  Controller.ButtonRDown.released(RollertStop);\n  Controller.ButtonRUp.released(RollertStop);\n\n  Controller.ButtonFUp.pressed(SetChuchu);\n  Controller.ButtonFDown.pressed(ResetChuchu);\n\n  Controller.ButtonLUp.pressed(FlyIn);\n  Controller.ButtonLDown.pressed(FlyOut);\n  Controller.ButtonLDown.released(FlyStop);\n\n  Controller.ButtonEUp.pressed(ChuchuForward);\n  Controller.ButtonEDown.pressed(ChuchuReverse);\n\n  Controller.ButtonEUp.released(ChuchuStop);\n  Controller.ButtonEDown.released(ChuchuStop);\n  \n}","textLanguage":"cpp","robotConfig":[{"port":[],"name":"Controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"tank"},"triportSourcePort":22},{"port":[1,7,null],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"3:1","direction":"fwd","gyroType":"none","width":"26","unit":"mm","wheelbase":"13","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[5],"name":"Chuchu","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[2,8],"name":"FlyingHweel","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[3],"name":"Rollert","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"4.0.8","fileFormat":"2.0.0","targetBrainGen":"Second","v5SoundsEnabled":false}